import asyncio
import logging
import re
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram import Bot, Dispatcher
from aiogram.types import Message
from aiogram.filters import CommandStart, Command
from config import TOKEN
from db import execute_query, create_tables
from reminders import start_scheduler

bot = Bot(token=TOKEN)
dp = Dispatcher()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏
class AddHabitStates(StatesGroup):
    waiting_for_habit_details = State()

class TaskState(StatesGroup):
    waiting_for_task_details = State()

@dp.message(CommandStart())
async def start(message: Message):
    # –ü–µ—Ä–µ–¥–∞–µ–º SQL-–∑–∞–ø—Ä–æ—Å –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∞–ø—Ä—è–º—É—é
    execute_query(
        "INSERT INTO users (tg_id, username) VALUES (%s, %s) ON CONFLICT (tg_id) DO NOTHING;", 
        (message.from_user.id, message.from_user.username)
    )
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–¥–∞—á–∞–º–∏ –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–∏–≤—ã—á–∫–∏.")

@dp.message(Command("add_tasking"))
async def start_task_creation(message: Message, state: FSMContext):
    """
    –ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏. –ü—Ä–æ—Å–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ.
    """
    await message.answer(
        "‚úèÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∑–∞–¥–∞—á—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: [–Ω–∞–∑–≤–∞–Ω–∏–µ] [YYYY-MM-DD]\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: –ó–∞–∫–æ–Ω—á–∏—Ç—å –ø—Ä–æ–µ–∫—Ç 2024-12-15"
    )
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    await state.set_state(TaskState.waiting_for_task_details)

@dp.message(TaskState.waiting_for_task_details)
async def process_task_details(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–¥–∞—á–∏.
    """
    try:
        match = re.match(r"(.+)\s(\d{4}-\d{2}-\d{2})$", message.text.strip())
        if not match:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞.")
        
        title = match.group(1).strip()  # –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
        deadline = match.group(2).strip()  # –î–∞—Ç–∞
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–¥–∞—á—É –≤ –±–∞–∑—É
        execute_query(
            "INSERT INTO tasks (user_id, title, deadline) VALUES (%s, %s, %s);",
            (message.from_user.id, title, deadline)
        )
        await message.answer(f"‚úÖ –ó–∞–¥–∞—á–∞ '{title}' —Å –¥–µ–¥–ª–∞–π–Ω–æ–º {deadline} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞.")
    except ValueError:
        await message.answer(
            "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç: [–Ω–∞–∑–≤–∞–Ω–∏–µ] [YYYY-MM-DD]"
        )
        return
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

@dp.message(Command("view_tasks"))
async def list_tasks(message: Message):
    try:
        tasks = execute_query(
            "SELECT title, deadline FROM tasks WHERE user_id = %s AND status = 'pending';",
            (message.from_user.id,)
        )
        
        if tasks:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
            response = "\n".join([f"üìå {task[0]} ‚Äî {task[1]}" for task in tasks])
            await message.answer(f"–í–∞—à–∏ –∑–∞–¥–∞—á–∏:\n{response}")
        else:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–∞—á.")
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á: {e}")


@dp.message(Command("add_habit"))
async def start_add_habit(message: Message, state: FSMContext):
    """
    –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é.
    """
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏ –∏ –µ—ë —á–∞—Å—Ç–æ—Ç—É —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.\n–ü—Ä–∏–º–µ—Ä: –ó–∞–Ω—è—Ç–∏–µ —Å–ø–æ—Ä—Ç–æ–º - –µ–∂–µ–¥–Ω–µ–≤–Ω–æ")
    await state.set_state(AddHabitStates.waiting_for_habit_details)

@dp.message(AddHabitStates.waiting_for_habit_details)
async def process_add_habit(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –¥–∞–Ω–Ω—ã–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–∏–≤—ã—á–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.
    """
    try:
        # –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –∏ —á–∞—Å—Ç–æ—Ç—ã –ø—Ä–∏–≤—ã—á–∫–∏
        match = re.match(r"^(.+)\s*-\s*(.+)$", message.text)
        if not match:
            raise ValueError("Invalid format")
        
        title, frequency = match.groups()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —á–∞—Å—Ç–æ—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å "–µ–∂–µ–¥–Ω–µ–≤–Ω–æ", "–µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ" –∏ —Ç.–¥.)
        if not frequency:
            await message.answer("‚ö†Ô∏è –ß–∞—Å—Ç–æ—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π.")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏–≤—ã—á–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        execute_query(
            "INSERT INTO habits (user_id, title, frequency) VALUES (%s, %s, %s);",
            (message.from_user.id, title.strip(), frequency.strip())
        )
        await message.answer(f"‚úÖ –ü—Ä–∏–≤—ã—á–∫–∞ '{title.strip()}' –¥–æ–±–∞–≤–ª–µ–Ω–∞ —Å —á–∞—Å—Ç–æ—Ç–æ–π: {frequency.strip()}.")
    except ValueError:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –Ω–∞–∑–≤–∞–Ω–∏–µ - —á–∞—Å—Ç–æ—Ç–∞.\n–ü—Ä–∏–º–µ—Ä: –ó–∞–Ω—è—Ç–∏–µ —Å–ø–æ—Ä—Ç–æ–º - –µ–∂–µ–¥–Ω–µ–≤–Ω–æ")
    except Exception as e:
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–∏–≤—ã—á–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        logging.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏: {e}")
    finally:
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()

@dp.message(Command("view_habits"))
async def list_habits(message: Message):
    habits = execute_query("SELECT title, streak FROM habits WHERE user_id = %s;", 
                           (message.from_user.id,))
    if habits:
        response = "\n".join([f"{habit[0]} (—Å—Ç—Ä–∏–∫: {habit[1]} –¥–Ω–µ–π)" for habit in habits])
        await message.answer(f"–í–∞—à–∏ –ø—Ä–∏–≤—ã—á–∫–∏:\n{response}")
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∏–≤—ã—á–µ–∫.")


async def main():
    start_scheduler(bot)
    await dp.start_polling(bot)


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    try:
        create_tables()
        asyncio.run(main())
    except KeyboardInterrupt:
        print('Exit')